{"version":3,"sources":["ng://ng-cascading-dropdown-lib/lib/ng-cascading-dropdown-lib.service.ts","ng://ng-cascading-dropdown-lib/lib/ng-cascading-dropdown-lib.component.ts","ng://ng-cascading-dropdown-lib/lib/ng-cascading-dropdown-lib.module.ts"],"names":["NgCascadingDropdownLibService","Injectable","args","providedIn","NgCascadingDropdownLibComponent","this","dropdownData","dropdownValue","childRootData","dropDownCounter","rootData","finalSelectedElement","disableDropdown","showDefaultSelection","showHorizontal","notifyFinalDropDownValue","EventEmitter","notifyDropDownValue","notifyChangeEvent","prototype","ngOnInit","inputCascadingData","processParentDropdownData","processParentChildDropdownData","push","Object","assign","data","unflattenJson","arrElem","mappedElem","tree","mappedArr","i","len","length","id","childData","hasOwnProperty","parentGroupID","onDropdownChange","dataObj","currentLength","index","splice","populateDropDownCounter","emit","slice","j","Component","selector","template","Input","Output","NgCascadingDropdownLibModule","NgModule","declarations","imports","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgCascadingDropdownLibService {\r\n\r\n  constructor() { }\r\n}\r\n","// Angular imports\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ng-cascading-dropdown',\r\n  templateUrl: './ng-cascading-dropdown-lib.component.html',\r\n  styleUrls: ['./ng-cascading-dropdown-lib.component.css']\r\n})\r\nexport class NgCascadingDropdownLibComponent implements OnInit {\r\n\r\n  /**\r\n   * Page Specific Prop's\r\n   */\r\n  public dropdownData = [];\r\n  public dropdownValue = [];\r\n  public childRootData = [];\r\n  public dropDownCounter = [];\r\n\r\n  private rootData = [];\r\n  private finalSelectedElement = {};\r\n\r\n  /**\r\n   * Input Output Prop's\r\n   */\r\n  // Input Data for cascading dropdown\r\n  @Input() inputCascadingData;\r\n\r\n  // Input Data for default selection to be show per dropdown\r\n  @Input() defaultSelectionData;\r\n\r\n  // Toggle Dropdown disability\r\n  @Input() disableDropdown = false;\r\n\r\n  // Show Default Selection\r\n  @Input() showDefaultSelection = false;\r\n\r\n  // Show Horizontal dropdown or Vertical dropdown\r\n  @Input() showHorizontal = true;\r\n\r\n  // Notify the final dropdown value selected\r\n  @Output() notifyFinalDropDownValue = new EventEmitter();\r\n\r\n  // Notify all the Selected Values per dropdown\r\n  @Output() notifyDropDownValue = new EventEmitter();\r\n\r\n  // Notify if dropdown value is changed\r\n  @Output() notifyChangeEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Class Constructor\r\n   */\r\n  constructor() { }\r\n\r\n\r\n  /**\r\n   * Angular Life Cycle Hook\r\n   */\r\n  ngOnInit() {\r\n    if (this.inputCascadingData) {\r\n      this.dropdownData = this.inputCascadingData;\r\n      this.processParentDropdownData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Separate Server Dropdown Data into Parent And Child Array\r\n   * and Call Parsing Function\r\n   */\r\n\r\n  processParentDropdownData() {\r\n    this.rootData = this.processParentChildDropdownData(this.dropdownData);\r\n    this.dropDownCounter.push(Object.assign([], this.rootData));\r\n    this.dropdownValue[0] = 'default';\r\n  }\r\n\r\n  /**\r\n   * Calls Parsing function and returns Parsed Array(Parent-Child Relationship)\r\n   */\r\n\r\n  processParentChildDropdownData(data) {\r\n    const tree = this.unflattenJson(data);\r\n    return tree;\r\n  }\r\n\r\n  /**\r\n   * Converting Flat JSON to Parent-Child Tree\r\n   */\r\n\r\n  unflattenJson(data) {\r\n    const tree = [];\r\n    const mappedArr = {};\r\n    let arrElem;\r\n    let mappedElem;\r\n\r\n    for (let i = 0, len = data.length; i < len; i++) {\r\n      arrElem = data[i];\r\n      mappedArr[arrElem.id] = arrElem;\r\n      mappedArr[arrElem.id].childData = [];\r\n    }\r\n    for (const id in mappedArr) {\r\n      if (mappedArr.hasOwnProperty(id)) {\r\n        mappedElem = mappedArr[id];\r\n        if (mappedElem.parentGroupID) {\r\n          mappedArr[mappedElem.parentGroupID].childData.push(mappedElem);\r\n        } else {\r\n          tree.push(mappedElem);\r\n        }\r\n      }\r\n    }\r\n    return tree;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle Dropdown change and do conditional Checking\r\n   */\r\n\r\n  onDropdownChange(dataObj, i) {\r\n    if (dataObj !== 'default' && dataObj.childData.length > 0) { // If child elements are present\r\n      const currentLength = i;\r\n      this.dropDownCounter = [];\r\n      if (i === 0) {\r\n        this.dropdownValue = [];\r\n      }\r\n      for (let index = this.dropdownValue.length - 1; index > currentLength; index--) {\r\n        this.dropdownValue.splice(index, 1);\r\n      }\r\n      this.populateDropDownCounter(dataObj, i);\r\n      this.notifyChangeEvent.emit(false);\r\n    } else if (dataObj === 'default') { // for default condition\r\n      const currentLength = i;\r\n      this.dropdownValue[i] = 'default';\r\n      for (let index = this.dropdownValue.length - 1; index > currentLength; index--) {\r\n        this.dropdownValue.splice(index, 1);\r\n      }\r\n      for (let index = this.dropDownCounter.length - 1; index > currentLength; index--) {\r\n        this.dropDownCounter.splice(index, 1);\r\n      }\r\n      this.notifyChangeEvent.emit(false);\r\n    } else { // for final element with no child element\r\n      this.dropdownValue[i] = dataObj;\r\n      if (i === 0) {\r\n        this.dropDownCounter = [];\r\n        this.dropdownValue = [];\r\n        this.dropDownCounter[0] = Object.assign([], this.rootData);\r\n        this.dropdownValue[0] = dataObj;\r\n      } else {\r\n        this.dropDownCounter = this.dropDownCounter.slice(0, i + 1);\r\n        this.dropdownValue = this.dropdownValue.slice(0, i + 1);\r\n      }\r\n      this.finalSelectedElement = {};\r\n      this.finalSelectedElement = Object.assign({}, dataObj);\r\n      this.notifyFinalDropDownValue.emit(this.finalSelectedElement);\r\n      this.notifyDropDownValue.emit(this.dropdownValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by dropdown if child element is present\r\n   */\r\n\r\n  populateDropDownCounter(dataObj, i) {\r\n    this.dropdownValue[i] = dataObj;\r\n    this.dropDownCounter[0] = Object.assign([], this.rootData);\r\n    for (let j = 1; j < this.dropdownValue.length + 1; j++) {\r\n      this.dropDownCounter[j] = Object.assign([], this.dropdownValue[j - 1].childData);\r\n    }\r\n    this.dropdownValue[i + 1] = 'default';\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgCascadingDropdownLibComponent } from './ng-cascading-dropdown-lib.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [NgCascadingDropdownLibComponent],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [NgCascadingDropdownLibComponent]\r\n})\r\nexport class NgCascadingDropdownLibModule { }\r\n"]}